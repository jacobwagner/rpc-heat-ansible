# Template Version (Liberty)
heat_template_version: 2015-10-15

# Template Description
description: >
  Deploy A Rackspace Private Cloud on Rackspace Private Cloud
  Includes: Full Compute Stack, Block Storage, Ceph Storage

# Template Parameters
parameters:
  ansible_tags:
    type: string
    label: Ansible Tag
    description: This ansible tag to be run via ansible.
    default: prepare
  ansible_forks:
    type: number
    label: Ansible FORKS
    description: The FORKS variable to set for ansible runs
    default: 10
  ssh_user_key:
    type: string
    label: SSH Keypair Name
    description: Name of the ssh key used to ssh into deployment server
  rpc_repo:
    type: string
    label: RPC Openstack Repository Github URL
    description: The URL of the rpc-openstack git repository.
    default: https://github.com/rcbops/rpc-openstack.git
  rpc_branch:
    type: string
    label: RPC Openstack Branch/Hash/Tag
    description: The branch/hash/tag of rpc-openstack to checkout and deploy.
    default: master
  rpc_heat_ansible_repo:
    type: string
    label: RPC Heat Ansible Github Repo
    description: The URL of the repository for RPC Heat Ansible.
    default: https://github.com/cloud-training/rpc-heat-ansible.git
  rpc_heat_ansible_branch:
    type: string
    label: RPC Heat Ansible Branch
    description: The branch of RPC Heat Ansible to clone.
    default: master
  external_gateway:
    type: string
    label: Stack external network gateway
    description: The network used for external routing
    default: public
  floating_ip_network:
    type: string
    label: External network for floating ips
    description: External Floating network to give stack floating IPs from.
    default: public
  management_subnet_cidr:
    type: string
    label: RPC Management Network CIDR
    description: The management CIDR for the RPC cluster
    default: 172.29.232.0/22
  infra_root_volume_size:
    type: number
    label: infra server root volume size
    description: The size in GB of the infra server root volume for the servers
    default: 50
  logger_root_volume_size:
    type: number
    label: logger server root volume size
    description: The size in GB of the logger server root volume for the servers
    default: 50
  compute_root_volume_size:
    type: number
    label: compute server root volume size
    description: The size in GB of the compute server root volume for the servers
    default: 10
  block_root_volume_size:
    type: number
    label: block server root volume size
    description: The size in GB of the block server root volume for the servers
    default: 5
  ceph_root_volume_size:
    type: number
    label: Ceph Server root volume size
    description: The size in GB of the Ceph Server root volume for the servers
    default: 5
  root_volume_type:
    type: string
    label: type of volume for server root volume
    description: The volume type to be used for root volumes of servers
    default: lvm
    constraints:
      - allowed_values:
        - lvm
        - lvm_ssd
  block_volume_type:
    type: string
    label: block volume type
    description: The type of volume to be used for block server ceph volumes
    default: lvm
    constraints:
      - allowed_values:
        - lvm
        - lvm_ssd
  block_volume_size:
    type: number
    label: block volume size
    description: The size in GB of each block servers ceph storage
    default: 10
  ceph_volume_type:
    type: string
    label: ceph volume type
    description: The type of volume to be used for Ceph Server ceph volumes
    default: lvm
    constraints:
      - allowed_values:
        - lvm
        - lvm_ssd
  ceph_volume_size:
    type: number
    label: ceph volume size
    description: The size in GB of each Ceph Servers ceph storage
    default: 10
  ceph_journal_type:
    type: string
    label: ceph volume type
    description: The type of volume to be used for Ceph Server journal volumes
    default: lvm_ssd
    constraints:
      - allowed_values:
        - lvm
        - lvm_ssd
  ceph_journal_size:
    type: number
    label: ceph volume size
    description: The size in GB of each Ceph Servers ceph journal storage
    default: 10
  deploy_retries:
    type: number
    label: Number of deployment retries
    description: The number of times the ansible should retry the deployment playbooks
    default: 1
  availability_zone:
    type: string
    label: Cluster Availability Zone
    description: The Availability Zone to deploy the cluster inventory
    default: 'nova'
  infra_flavor:
    type: string
    label: Infra Node Flavor
    description: The flavor for the infra node(s)
    default: rpc.large
  logger_flavor:
    type: string
    label: Logger Node Flavor
    description: The flavor for the logger node(s)
    default: rpc.medium
  compute_flavor:
    type: string
    label: Compute Node Flavor
    description: The flavor for the compute node(s)
    default: rpc.medium
  block_flavor:
    type: string
    label: Block Node Flavor
    description: The flavor for the infra node(s)
    default: rpc.small
  ceph_flavor:
    type: string
    label: ceph Node Flavor
    description: The flavor for the infra node(s)
    default: rpc.small
  server_image:
    type: string
    label: Server image
    description: The image to use for all servers
    default: 'ubuntu-trusty-heat-agent'

# Template Resources
resources:

  ### Creation of virtual resources ###

  # The password for the Heat Stack
  password:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  # Keypair to allow hosts to communicate btw each other in the stack
  # Will allow sshing around the stack
  keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-rpc-keypair"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      save_private_key: True

  # Create the networks needed for RPC
  # Create the router
  stack_router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      external_gateway_info:
        network:
          get_param: external_gateway
        enable_snat: True
      ha: False
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-router"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"

  # Create the management network
  # The neutron L2 network for the Heat Stack management network
  management_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-management-network"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      port_security_enabled: False

  # The neutron subnet for the Heat Stack management network
  management_subnet:
    type: OS::Neutron::Subnet
    properties:
      network:
        get_resource: management_network
      cidr:
        get_param: management_subnet_cidr
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-management-subnet"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"

  # Attach the management interface to router
  management_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router:
        get_resource: stack_router
      subnet:
        get_resource: management_subnet

  # Create root volume for infra01
  root_volume_infra01:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra01-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: infra_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for infra02
  root_volume_infra02:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra02-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: infra_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for infra03
  root_volume_infra03:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra03-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: infra_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for logger01
  root_volume_logger01:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-logger01-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: logger_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for compute01
  root_volume_compute01:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-compute01-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: compute_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for compute02
  root_volume_compute02:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-compute02-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: compute_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for block01
  root_volume_block01:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-block01-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: block_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for block02
  root_volume_block02:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-block02-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: block_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for ceph01
  root_volume_ceph01:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph01-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: ceph_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for ceph02
  root_volume_ceph02:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph02-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: ceph_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create root volume for ceph03
  root_volume_ceph03:
    type: OS::Cinder::Volume
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph03-root"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      image:
        get_param: server_image
      size:
        get_param: ceph_root_volume_size
      volume_type:
        get_param: root_volume_type

  # Create cinder volume for volume 1 block server 1
  volume01_block01:
    type: OS::Cinder::Volume
    description: Volume 1 for Block Server 1
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume01-block01"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: block_volume_size
      volume_type:
        get_param: block_volume_type

  # Create cinder volume for volume 1 block server 2
  volume01_block02:
    type: OS::Cinder::Volume
    description: Volume 1 for Block Server 2
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume01-block02"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: block_volume_size
      volume_type:
        get_param: block_volume_type

  # Create journal volume for Ceph Server 1
  journal_volume_ceph01:
    type: OS::Cinder::Volume
    description: Journal Volume for Ceph Server 1
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-journal-ceph01"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_journal_size
      volume_type:
        get_param: ceph_journal_type

# Create journal volume for Ceph Server 2
  journal_volume_ceph02:
    type: OS::Cinder::Volume
    description: Journal Volume for Ceph Server 2
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-journal-ceph02"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_journal_size
      volume_type:
        get_param: ceph_journal_type

# Create journal volume for Ceph Server 3
  journal_volume_ceph03:
    type: OS::Cinder::Volume
    description: Journal Volume for Ceph Server 3
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-journal-ceph03"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_journal_size
      volume_type:
        get_param: ceph_journal_type

  # Create 3 cinder volumes for each ceph node
  # Create cinder volume 1 Ceph Server 1
  volume01_ceph01:
    type: OS::Cinder::Volume
    description: Volume 2 for Ceph Server 1
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume01-ceph01"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 2 Ceph Server 1
  volume02_ceph01:
    type: OS::Cinder::Volume
    description: Volume 2 for Ceph Server 1
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume02-ceph01"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 3 Ceph Server 1
  volume03_ceph01:
    type: OS::Cinder::Volume
    description: Volume 3 for Ceph Server 1
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume03-ceph01"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 1 Ceph Server 2
  volume01_ceph02:
    type: OS::Cinder::Volume
    description: Volume 1 for Ceph Server 2
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume01-ceph02"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 2 Ceph Server 2
  volume02_ceph02:
    type: OS::Cinder::Volume
    description: Volume 2 for Ceph Server 2
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume02-ceph02"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 3 Ceph Server 2
  volume03_ceph02:
    type: OS::Cinder::Volume
    description: Volume 3 for Ceph Server 2
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume03-ceph02"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 1 Ceph Server 3
  volume01_ceph03:
    type: OS::Cinder::Volume
    description: Volume 1 for Ceph Server 3
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume01-ceph03"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 2 Ceph Server 3
  volume02_ceph03:
    type: OS::Cinder::Volume
    description: Volume 2 for Ceph Server 3
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume02-ceph03"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  # Create cinder volume 3 Ceph Server 3
  volume03_ceph03:
    type: OS::Cinder::Volume
    description: Volume 3 for Ceph Server 3
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-volume03-ceph03"
          params:
            "%heat_stack_prefix%":
              get_param: "OS::stack_id"
            "%heat_stack_name%":
              get_param: "OS::stack_name"
      size:
        get_param: ceph_volume_size
      volume_type:
        get_param: ceph_volume_type

  ### Configuration of servers and software ###

  # RPC Deployment Server Init
  deployment_cloud_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee /var/log/cloud-init-output.log'
        write_files:
          - path: /opt/rpc-on-rpc/id_rsa
            permissions: "0600"
            content: { get_attr: [ keypair, private_key ] }
          - path: /root/.ssh/config
            permissions: "0644"
            content: |
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          - path: /opt/rpc-on-rpc/inventory
            permissions: "0600"
            content:
              str_replace:
                template: |
                  [all:vars]
                  ansible_ssh_user=root
                  ansible_ssh_private_key_file=/opt/rpc-on-rpc/id_rsa
                  heat_stack_id=%heat_stack_id%
                  heat_stack_name=%heat_stack_name%
                  heat_stack_password=%heat_stack_password%
                  heat_stack_prefix=%heat_stack_name%
                  rpc_branch=%rpc_branch%
                  deploy_retries=%deploy_retries%

                  [all]
                  infra01      ansible_connection=local                   node_id=10
                  infra02      ansible_ssh_host=%infra02_management_ip%   node_id=11
                  infra03      ansible_ssh_host=%infra03_management_ip%   node_id=12
                  logger01     ansible_ssh_host=%logger01_management_ip%  node_id=13
                  compute01    ansible_ssh_host=%compute01_management_ip% node_id=14
                  compute02    ansible_ssh_host=%compute02_management_ip% node_id=15
                  block01      ansible_ssh_host=%block01_management_ip%   node_id=16
                  block02      ansible_ssh_host=%block02_management_ip%   node_id=17
                  ceph01       ansible_ssh_host=%ceph01_management_ip%    node_id=18
                  ceph02       ansible_ssh_host=%ceph02_management_ip%    node_id=19
                  ceph03       ansible_ssh_host=%ceph03_management_ip%    node_id=20

                  [deployment]
                  infra01

                  [infra]
                  infra01
                  infra02
                  infra03

                  [logger]
                  logger01

                  [compute]
                  compute01
                  compute02

                  [block]
                  block01
                  block02

                  [ceph]
                  ceph01
                  ceph02
                  ceph03
                params:
                  "%heat_stack_id%":            { get_param: "OS::stack_id" }
                  "%heat_stack_name%":          { get_param: "OS::stack_name" }
                  "%heat_stack_password%":      { get_attr: [ password, value ] }
                  "%rpc_branch%":               { get_param: "rpc_branch" }
                  "%deploy_retries%":           { get_param: "deploy_retries" }
                  "%infra02_management_ip%":    { get_attr: [ server_infra02, addresses,      { get_resource: management_network }, 0, addr ] }
                  "%infra03_management_ip%":    { get_attr: [ server_infra03, addresses,      { get_resource: management_network }, 0, addr ] }
                  "%logger01_management_ip%":   { get_attr: [ server_logger01, addresses,     { get_resource: management_network }, 0, addr ] }
                  "%compute01_management_ip%":  { get_attr: [ server_compute01, addresses,    { get_resource: management_network }, 0, addr ] }
                  "%compute02_management_ip%":  { get_attr: [ server_compute02, addresses,    { get_resource: management_network }, 0, addr ] }
                  "%block01_management_ip%":    { get_attr: [ server_block01, addresses,      { get_resource: management_network }, 0, addr ] }
                  "%block02_management_ip%":    { get_attr: [ server_block02, addresses,      { get_resource: management_network }, 0, addr ] }
                  "%ceph01_management_ip%":     { get_attr: [ server_ceph01, addresses,       { get_resource: management_network }, 0, addr ] }
                  "%ceph02_management_ip%":     { get_attr: [ server_ceph02, addresses,       { get_resource: management_network }, 0, addr ] }
                  "%ceph03_management_ip%":     { get_attr: [ server_ceph03, addresses,       { get_resource: management_network }, 0, addr ] }

  deployment_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: deployment_cloud_init }

  # RPC Host Setup
  rpc_host_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee /var/log/cloud-init-output.log'

  rpc_host_software_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash

        set -e
        set -x

        echo "Setup of RPC Host Server"

        # Copy /ubuntu/.ssh/authorized_keys to /root/.ssh/authorized_keys for Ansible Automation
        cp /home/ubuntu/.ssh/authorized_keys /root/.ssh/authorized_keys

  infrastructure_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: rpc_host_cloud_config }
        - config: { get_resource: rpc_host_software_config }

  logger_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: rpc_host_cloud_config }
        - config: { get_resource: rpc_host_software_config }

  compute_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: rpc_host_cloud_config }
        - config: { get_resource: rpc_host_software_config }

  block_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: rpc_host_cloud_config }
        - config: { get_resource: rpc_host_software_config }

  ceph_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: rpc_host_cloud_config }
        - config: { get_resource: rpc_host_software_config }

  ### Creation of all Servers ###

  # Create Infra 01 Server
  server_infra01:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: infra_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_infra01
          delete_on_termination: true
      config_drive: True
      key_name:
        get_param: ssh_user_key
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra01"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: deployment_init }

  # Create Infra 02 Server
  server_infra02:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: infra_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_infra02
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra02"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: infrastructure_init }

  # Create Infra 03 Server
  server_infra03:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: infra_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_infra03
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-infra03"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: infrastructure_init }

  # Create Logger 01 Server
  server_logger01:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: logger_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_logger01
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-logger01"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: logger_init }

  # Create Compute 01 Server
  server_compute01:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: compute_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_compute01
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-compute01"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: compute_init }

  # Create Compute 02 Server
  server_compute02:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: compute_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_compute02
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-compute02"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: compute_init }

  # Create Block 01 Server
  server_block01:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: block_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_block01
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-block01"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: block_init }

  # Create Volume Attachments for Block Server 01
  # Create attachment for cinder volume 01 block server 01
  volume01_bs01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume01_block01
      instance_uuid:
        get_resource: server_block01

  # Create Block 02 Server
  server_block02:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: block_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_block02
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-block02"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: block_init }

  # Create attachment for cinder volume 01 block server 02
  volume01_bs02_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume01_block02
      instance_uuid:
        get_resource: server_block02

  # Create Ceph 01 Server
  server_ceph01:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: ceph_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_ceph01
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph01"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: ceph_init }

  # Create Volume Attachments for Ceph Server 01
  # Create attachment for journal volume
  journal_volume_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: journal_volume_ceph01
      instance_uuid:
        get_resource: server_ceph01

  # Create attachment for cinder volume 1 Ceph Server 1
  volume01_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume01_ceph01
      instance_uuid:
        get_resource: server_ceph01

  # Create attachment for cinder volume 2 Ceph Server 1
  volume01_ceph02_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume02_ceph01
      instance_uuid:
        get_resource: server_ceph01

  # Create attachment for cinder volume 3 Ceph Server 1
  volume01_ceph03_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume03_ceph01
      instance_uuid:
        get_resource: server_ceph01

  # Create ceph 02 Server
  server_ceph02:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: ceph_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_ceph02
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph02"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: ceph_init }

  # Create Volume Attachments for Ceph Server 02

  # Create attachment for journal volume
  journal_volume_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: journal_volume_ceph02
      instance_uuid:
        get_resource: server_ceph02

  # Create attachment for cinder volume 1 Ceph Server 2
  volume02_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume01_ceph02
      instance_uuid:
        get_resource: server_ceph02

  # Create attachment for cinder volume 2 Ceph Server 2
  volume02_ceph02_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume02_ceph02
      instance_uuid:
        get_resource: server_ceph02

  # Create attachment for cinder volume 3 Ceph Server 2
  volume02_ceph03_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume03_ceph02
      instance_uuid:
        get_resource: server_ceph02

  # Create ceph 03 Server
  server_ceph03:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: ceph_flavor
      admin_pass:
        get_attr: [ password, value ]
      block_device_mapping:
        - device_name: vda
          volume_id:
            get_resource: root_volume_ceph03
          delete_on_termination: true
      config_drive: True
      key_name:
        get_resource: keypair
      name:
        str_replace:
          template: "%heat_stack_name%-%heat_stack_prefix%-ceph03"
          params:
            "%heat_stack_prefix%" :
              get_param: "OS::stack_id"
            "%heat_stack_name%" :
              get_param: "OS::stack_name"
      networks:
        - network:
            get_resource: management_network
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: ceph_init }

  # Create Volume Attachments for Ceph Server 03

  # Create attachment for journal volume
  journal_volume_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: journal_volume_ceph03
      instance_uuid:
        get_resource: server_ceph03

  # Create attachment for cinder volume 1 Ceph Server 3
  volume03_ceph01_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume01_ceph03
      instance_uuid:
        get_resource: server_ceph03

  # Create attachment for cinder volume 2 Ceph Server 3
  volume03_ceph02_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume02_ceph03
      instance_uuid:
        get_resource: server_ceph03

  # Create attachment for cinder volume 3 Ceph Server 3
  volume03_ceph03_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id:
        get_resource: volume03_ceph03
      instance_uuid:
        get_resource: server_ceph03

  ### Pre Deploy Host Configuration ###
  rpc_host_ansible_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: rpc_repo
          description: RPC Software Git Repository URL
          type: String
        - name: rpc_branch
          description: RPC Software Git Branch/Tag
          type: String
        - name: rpc_heat_ansible_repo
          description: RPC Heat Ansible Git Repository URL
          type: String
        - name: rpc_heat_ansible_branch
          description: RPC Heat Ansible Git Branch/Tag
          type: String
        - name: ansible_forks
          description: Ansible FORKS variable
      config: |
        #!/bin/bash

        set -e -u -x

        # Set Ansible Parameters
        export ANSIBLE_FORCE_COLOR=true

        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-rpc-software

        function exit_failure {
          echo "FAILURE: '$@'"
          exit 1
        }

        function exit_success {
          touch ${prefix}.ran
          exit 0
        }

        function get_rpc_series {
          case "$rpc_branch" in
            *liberty*)
              export RPC_SERIES="12.2"
              ;;
            *12.0*)
              export RPC_SERIES="12.0"
              ;;
            *12.1*)
              export RPC_SERIES="12.1"
              ;;
            *12.2*)
              export RPC_SERIES="12.2"
              ;;
            *mitaka*)
              export RPC_SERIES="13.1"
              ;;
            *13.0*)
              export RPC_SERIES="13.0"
              ;;
            *13.1*)
              export RPC_SERIES="13.1"
              ;;
            *master*)
              export RPC_SERIES="13.1"
              ;;
            *)
              export RPC_SERIES="13.1"
          esac
        }

        function wait_for_apt {
          while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
            sleep 5
          done
        }

        # Set log file
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0

        chmod -R 0600 ${logdir}

        # Begin Configuration of RPC Host(s)
        echo "Configure RPC Hosts"

        # Set all needed env vars
        export HOME="/root"

        # Install Git Core
        apt-get update && apt-get install -y git-core || exit_failure "Failed to update and install git-core"

        # Set RPC_SERIES
        get_rpc_series %rpc_release%

        # Clone RPC Repo
        if [ -d "/opt/rpc-openstack" ]; then rm -Rf /opt/rpc-openstack; fi
        pushd /opt
        git clone $rpc_repo -b $rpc_branch || exit_failure "RPC Repo Git Clone Failure"
        cd rpc-openstack
        ( git submodule init && git submodule sync && git submodule update ) || exit_failure "Failed to update RPC submodules"
        popd

        # Clone rpc-heat-ansible repo
        if [ -d "/opt/rpc-heat-ansible" ]; then rm -Rf /opt/rpc-heat-ansible; fi
        pushd /opt
        git clone $rpc_heat_ansible_repo -b $rpc_heat_ansible_branch || exit_failure "RPC Heat Ansbile Git Clone Failure"
        cd rpc-heat-ansible

        if [[ "$rpc_heat_ansible_repo" != "https://github.com/cloud-training/rpc-heat-ansible.git" ]]; then
          git remote add upstream https://github.com/cloud-training/rpc-heat-ansible.git
        fi
        popd

        # Wait for apt to finish elsewhere
        echo "Waiting for apt to finish from cloud init"
        wait_for_apt

        # Bootstrap Ansible and PIP
        pushd /opt/rpc-openstack/openstack-ansible
        ./scripts/bootstrap-ansible.sh || exit_failure "Failed to execute bootstrap-ansible.sh"
        popd

        # Run Prepare Ansible Tags
        pushd /opt/rpc-heat-ansible/playbooks/
        ansible-playbook -v -f $ansible_forks -i /opt/rpc-on-rpc/inventory -t prepare rpc-on-rpc-playbook.yml || exit_failure "Ansible Playbook Run Failure"
        popd

        exit_success

  # Run host config ansible playbooks
  rpc_host_ansible_deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        rpc_repo:
          get_param: rpc_repo
        rpc_branch:
          get_param: rpc_branch
        rpc_heat_ansible_repo:
          get_param: rpc_heat_ansible_repo
        rpc_heat_ansible_branch:
          get_param: rpc_heat_ansible_branch
        ansible_forks:
          get_param: ansible_forks
      config:
        get_resource: rpc_host_ansible_config
      server:
        get_resource: server_infra01
    depends_on:
      - server_infra01
      - server_infra02
      - server_infra03
      - server_compute01
      - server_compute02
      - server_block01
      - server_block02
      - server_ceph01
      - server_ceph02
      - server_ceph03

  ### Deployment of RPC Software ###

  # RPC Deployment Config
  rpc_software_deploy_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: ansible_forks
          description: Ansible FORKS variable
      config: |
        #!/bin/bash

        set -e -u -x

        # Set RPC deploy.sh bash environment variables
        export DEPLOY_TEMPEST="yes"
        export DEPLOY_HAPROXY="yes"
        export DEPLOY_MAAS="no"
        export DEPLOY_CEPH="yes"
        export FORKS=$ansible_forks

        function exit_failure {
          echo "FAILURE: '$@'"
          exit 1
        }

        function exit_success {
          touch ${prefix}.ran
          exit 0
        }

        logdir=/var/log/heat-deployments
        prefix=${logdir}/rpc-software-deploy

        # Set log file
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        chmod -R 0600 ${logdir}

        echo "Deploy RPC Software"
        pushd /opt/rpc-openstack/
        #./scripts/deploy.sh || exit_failure "RPC deploy.sh Failure"
        popd

        exit_success

  # Deploy RPC ( wait for all inits to come back )
  rpc_software_deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        ansible_forks:
          get_param: ansible_forks
      config:
        get_resource: rpc_software_deploy_config
      server:
        get_resource: server_infra01
    depends_on:
      - rpc_host_ansible_deploy

# Template Outputs
outputs:

  # Save the password created for the vms
  password:
    description: Password
    value:
      get_attr: [ password, value ]

  # Infra01 Management IP
  server_deployment_private_ip:
    description: Infra01 Management IP
    value:
      get_attr: [ server_infra01, addresses, { get_resource: management_network }, 0, addr ]

  # All Stack Server Management IPs
  management_ips:
    description: All Management IPs
    value:
      str_replace:
        template: |
          infra01      - %server_infra01_ip%
          infra02      - %server_infra02_ip%
          infra03      - %server_infra03_ip%
          compute01    - %server_compute01_ip%
          compute02    - %server_compute02_ip%
          block01      - %server_block01_ip%
          block02      - %server_block02_ip%
          ceph01     - %server_ceph01_ip%
          ceph02     - %server_ceph02_ip%
          ceph03     - %server_ceph03_ip%
        params:
          "%server_infra01_ip%":   { get_attr: [ server_infra01, addresses,     { get_resource: management_network }, 0, addr ] }
          "%server_infra02_ip%":   { get_attr: [ server_infra02, addresses,     { get_resource: management_network }, 0, addr ] }
          "%server_infra03_ip%":   { get_attr: [ server_infra03, addresses,     { get_resource: management_network }, 0, addr ] }
          "%server_compute01_ip%": { get_attr: [ server_compute01, addresses,   { get_resource: management_network }, 0, addr ] }
          "%server_compute02_ip%": { get_attr: [ server_compute02, addresses,   { get_resource: management_network }, 0, addr ] }
          "%server_block01_ip%":   { get_attr: [ server_block01, addresses,     { get_resource: management_network }, 0, addr ] }
          "%server_block02_ip%":   { get_attr: [ server_block02, addresses,     { get_resource: management_network }, 0, addr ] }
          "%server_ceph01_ip%":  { get_attr: [ server_ceph01, addresses,    { get_resource: management_network }, 0, addr ] }
          "%server_ceph02_ip%":  { get_attr: [ server_ceph02, addresses,    { get_resource: management_network }, 0, addr ] }
          "%server_ceph03_ip%":  { get_attr: [ server_ceph03, addresses,    { get_resource: management_network }, 0, addr ] }